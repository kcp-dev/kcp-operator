/*
Copyright 2024 The KCP Authors.

Licensed under the Apache License, Version 2.0 (the "License");
you may not use this file except in compliance with the License.
You may obtain a copy of the License at

    http://www.apache.org/licenses/LICENSE-2.0

Unless required by applicable law or agreed to in writing, software
distributed under the License is distributed on an "AS IS" BASIS,
WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
See the License for the specific language governing permissions and
limitations under the License.
*/

// Code generated by applyconfiguration-gen. DO NOT EDIT.

package v1alpha1

import (
	v1 "k8s.io/apimachinery/pkg/apis/meta/v1"
)

// CertificateSpecTemplateApplyConfiguration represents a declarative configuration of the CertificateSpecTemplate type for use
// with apply.
type CertificateSpecTemplateApplyConfiguration struct {
	Subject        *X509SubjectApplyConfiguration                   `json:"subject,omitempty"`
	IssuerRef      *ObjectReferenceApplyConfiguration               `json:"issuerRef,omitempty"`
	DNSNames       []string                                         `json:"dnsNames,omitempty"`
	IPAddresses    []string                                         `json:"ipAddresses,omitempty"`
	SecretTemplate *CertificateSecretTemplateApplyConfiguration     `json:"secretTemplate,omitempty"`
	Duration       *v1.Duration                                     `json:"duration,omitempty"`
	RenewBefore    *v1.Duration                                     `json:"renewBefore,omitempty"`
	PrivateKey     *CertificatePrivateKeyTemplateApplyConfiguration `json:"privateKey,omitempty"`
}

// CertificateSpecTemplateApplyConfiguration constructs a declarative configuration of the CertificateSpecTemplate type for use with
// apply.
func CertificateSpecTemplate() *CertificateSpecTemplateApplyConfiguration {
	return &CertificateSpecTemplateApplyConfiguration{}
}

// WithSubject sets the Subject field in the declarative configuration to the given value
// and returns the receiver, so that objects can be built by chaining "With" function invocations.
// If called multiple times, the Subject field is set to the value of the last call.
func (b *CertificateSpecTemplateApplyConfiguration) WithSubject(value *X509SubjectApplyConfiguration) *CertificateSpecTemplateApplyConfiguration {
	b.Subject = value
	return b
}

// WithIssuerRef sets the IssuerRef field in the declarative configuration to the given value
// and returns the receiver, so that objects can be built by chaining "With" function invocations.
// If called multiple times, the IssuerRef field is set to the value of the last call.
func (b *CertificateSpecTemplateApplyConfiguration) WithIssuerRef(value *ObjectReferenceApplyConfiguration) *CertificateSpecTemplateApplyConfiguration {
	b.IssuerRef = value
	return b
}

// WithDNSNames adds the given value to the DNSNames field in the declarative configuration
// and returns the receiver, so that objects can be build by chaining "With" function invocations.
// If called multiple times, values provided by each call will be appended to the DNSNames field.
func (b *CertificateSpecTemplateApplyConfiguration) WithDNSNames(values ...string) *CertificateSpecTemplateApplyConfiguration {
	for i := range values {
		b.DNSNames = append(b.DNSNames, values[i])
	}
	return b
}

// WithIPAddresses adds the given value to the IPAddresses field in the declarative configuration
// and returns the receiver, so that objects can be build by chaining "With" function invocations.
// If called multiple times, values provided by each call will be appended to the IPAddresses field.
func (b *CertificateSpecTemplateApplyConfiguration) WithIPAddresses(values ...string) *CertificateSpecTemplateApplyConfiguration {
	for i := range values {
		b.IPAddresses = append(b.IPAddresses, values[i])
	}
	return b
}

// WithSecretTemplate sets the SecretTemplate field in the declarative configuration to the given value
// and returns the receiver, so that objects can be built by chaining "With" function invocations.
// If called multiple times, the SecretTemplate field is set to the value of the last call.
func (b *CertificateSpecTemplateApplyConfiguration) WithSecretTemplate(value *CertificateSecretTemplateApplyConfiguration) *CertificateSpecTemplateApplyConfiguration {
	b.SecretTemplate = value
	return b
}

// WithDuration sets the Duration field in the declarative configuration to the given value
// and returns the receiver, so that objects can be built by chaining "With" function invocations.
// If called multiple times, the Duration field is set to the value of the last call.
func (b *CertificateSpecTemplateApplyConfiguration) WithDuration(value v1.Duration) *CertificateSpecTemplateApplyConfiguration {
	b.Duration = &value
	return b
}

// WithRenewBefore sets the RenewBefore field in the declarative configuration to the given value
// and returns the receiver, so that objects can be built by chaining "With" function invocations.
// If called multiple times, the RenewBefore field is set to the value of the last call.
func (b *CertificateSpecTemplateApplyConfiguration) WithRenewBefore(value v1.Duration) *CertificateSpecTemplateApplyConfiguration {
	b.RenewBefore = &value
	return b
}

// WithPrivateKey sets the PrivateKey field in the declarative configuration to the given value
// and returns the receiver, so that objects can be built by chaining "With" function invocations.
// If called multiple times, the PrivateKey field is set to the value of the last call.
func (b *CertificateSpecTemplateApplyConfiguration) WithPrivateKey(value *CertificatePrivateKeyTemplateApplyConfiguration) *CertificateSpecTemplateApplyConfiguration {
	b.PrivateKey = value
	return b
}
