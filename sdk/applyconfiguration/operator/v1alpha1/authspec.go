/*
Copyright 2024 The KCP Authors.

Licensed under the Apache License, Version 2.0 (the "License");
you may not use this file except in compliance with the License.
You may obtain a copy of the License at

    http://www.apache.org/licenses/LICENSE-2.0

Unless required by applicable law or agreed to in writing, software
distributed under the License is distributed on an "AS IS" BASIS,
WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
See the License for the specific language governing permissions and
limitations under the License.
*/

// Code generated by applyconfiguration-gen. DO NOT EDIT.

package v1alpha1

// AuthSpecApplyConfiguration represents a declarative configuration of the AuthSpec type for use
// with apply.
type AuthSpecApplyConfiguration struct {
	OIDC         *OIDCConfigurationApplyConfiguration `json:"oidc,omitempty"`
	DropGroups   []string                             `json:"dropGroups,omitempty"`
	PassOnGroups []string                             `json:"passOnGroups,omitempty"`
}

// AuthSpecApplyConfiguration constructs a declarative configuration of the AuthSpec type for use with
// apply.
func AuthSpec() *AuthSpecApplyConfiguration {
	return &AuthSpecApplyConfiguration{}
}

// WithOIDC sets the OIDC field in the declarative configuration to the given value
// and returns the receiver, so that objects can be built by chaining "With" function invocations.
// If called multiple times, the OIDC field is set to the value of the last call.
func (b *AuthSpecApplyConfiguration) WithOIDC(value *OIDCConfigurationApplyConfiguration) *AuthSpecApplyConfiguration {
	b.OIDC = value
	return b
}

// WithDropGroups adds the given value to the DropGroups field in the declarative configuration
// and returns the receiver, so that objects can be build by chaining "With" function invocations.
// If called multiple times, values provided by each call will be appended to the DropGroups field.
func (b *AuthSpecApplyConfiguration) WithDropGroups(values ...string) *AuthSpecApplyConfiguration {
	for i := range values {
		b.DropGroups = append(b.DropGroups, values[i])
	}
	return b
}

// WithPassOnGroups adds the given value to the PassOnGroups field in the declarative configuration
// and returns the receiver, so that objects can be build by chaining "With" function invocations.
// If called multiple times, values provided by each call will be appended to the PassOnGroups field.
func (b *AuthSpecApplyConfiguration) WithPassOnGroups(values ...string) *AuthSpecApplyConfiguration {
	for i := range values {
		b.PassOnGroups = append(b.PassOnGroups, values[i])
	}
	return b
}
