/*
Copyright 2024 The KCP Authors.

Licensed under the Apache License, Version 2.0 (the "License");
you may not use this file except in compliance with the License.
You may obtain a copy of the License at

    http://www.apache.org/licenses/LICENSE-2.0

Unless required by applicable law or agreed to in writing, software
distributed under the License is distributed on an "AS IS" BASIS,
WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
See the License for the specific language governing permissions and
limitations under the License.
*/

// Code generated by applyconfiguration-gen. DO NOT EDIT.

package v1alpha1

import (
	v1 "k8s.io/api/core/v1"

	operatorv1alpha1 "github.com/kcp-dev/kcp-operator/sdk/apis/operator/v1alpha1"
)

// CommonShardSpecApplyConfiguration represents a declarative configuration of the CommonShardSpec type for use
// with apply.
type CommonShardSpecApplyConfiguration struct {
	ClusterDomain        *string                                  `json:"clusterDomain,omitempty"`
	ShardBaseURL         *string                                  `json:"shardBaseURL,omitempty"`
	Etcd                 *EtcdConfigApplyConfiguration            `json:"etcd,omitempty"`
	Image                *ImageSpecApplyConfiguration             `json:"image,omitempty"`
	Replicas             *int32                                   `json:"replicas,omitempty"`
	Resources            *v1.ResourceRequirements                 `json:"resources,omitempty"`
	Audit                *AuditSpecApplyConfiguration             `json:"audit,omitempty"`
	Authorization        *AuthorizationSpecApplyConfiguration     `json:"authorization,omitempty"`
	Auth                 *AuthSpecApplyConfiguration              `json:"auth,omitempty"`
	CertificateTemplates *operatorv1alpha1.CertificateTemplateMap `json:"certificateTemplates,omitempty"`
	ServiceTemplate      *ServiceTemplateApplyConfiguration       `json:"serviceTemplate,omitempty"`
	DeploymentTemplate   *DeploymentTemplateApplyConfiguration    `json:"deploymentTemplate,omitempty"`
	CABundleSecretRef    *v1.LocalObjectReference                 `json:"caBundleSecretRef,omitempty"`
	ExtraArgs            []string                                 `json:"extraArgs,omitempty"`
}

// CommonShardSpecApplyConfiguration constructs a declarative configuration of the CommonShardSpec type for use with
// apply.
func CommonShardSpec() *CommonShardSpecApplyConfiguration {
	return &CommonShardSpecApplyConfiguration{}
}

// WithClusterDomain sets the ClusterDomain field in the declarative configuration to the given value
// and returns the receiver, so that objects can be built by chaining "With" function invocations.
// If called multiple times, the ClusterDomain field is set to the value of the last call.
func (b *CommonShardSpecApplyConfiguration) WithClusterDomain(value string) *CommonShardSpecApplyConfiguration {
	b.ClusterDomain = &value
	return b
}

// WithShardBaseURL sets the ShardBaseURL field in the declarative configuration to the given value
// and returns the receiver, so that objects can be built by chaining "With" function invocations.
// If called multiple times, the ShardBaseURL field is set to the value of the last call.
func (b *CommonShardSpecApplyConfiguration) WithShardBaseURL(value string) *CommonShardSpecApplyConfiguration {
	b.ShardBaseURL = &value
	return b
}

// WithEtcd sets the Etcd field in the declarative configuration to the given value
// and returns the receiver, so that objects can be built by chaining "With" function invocations.
// If called multiple times, the Etcd field is set to the value of the last call.
func (b *CommonShardSpecApplyConfiguration) WithEtcd(value *EtcdConfigApplyConfiguration) *CommonShardSpecApplyConfiguration {
	b.Etcd = value
	return b
}

// WithImage sets the Image field in the declarative configuration to the given value
// and returns the receiver, so that objects can be built by chaining "With" function invocations.
// If called multiple times, the Image field is set to the value of the last call.
func (b *CommonShardSpecApplyConfiguration) WithImage(value *ImageSpecApplyConfiguration) *CommonShardSpecApplyConfiguration {
	b.Image = value
	return b
}

// WithReplicas sets the Replicas field in the declarative configuration to the given value
// and returns the receiver, so that objects can be built by chaining "With" function invocations.
// If called multiple times, the Replicas field is set to the value of the last call.
func (b *CommonShardSpecApplyConfiguration) WithReplicas(value int32) *CommonShardSpecApplyConfiguration {
	b.Replicas = &value
	return b
}

// WithResources sets the Resources field in the declarative configuration to the given value
// and returns the receiver, so that objects can be built by chaining "With" function invocations.
// If called multiple times, the Resources field is set to the value of the last call.
func (b *CommonShardSpecApplyConfiguration) WithResources(value v1.ResourceRequirements) *CommonShardSpecApplyConfiguration {
	b.Resources = &value
	return b
}

// WithAudit sets the Audit field in the declarative configuration to the given value
// and returns the receiver, so that objects can be built by chaining "With" function invocations.
// If called multiple times, the Audit field is set to the value of the last call.
func (b *CommonShardSpecApplyConfiguration) WithAudit(value *AuditSpecApplyConfiguration) *CommonShardSpecApplyConfiguration {
	b.Audit = value
	return b
}

// WithAuthorization sets the Authorization field in the declarative configuration to the given value
// and returns the receiver, so that objects can be built by chaining "With" function invocations.
// If called multiple times, the Authorization field is set to the value of the last call.
func (b *CommonShardSpecApplyConfiguration) WithAuthorization(value *AuthorizationSpecApplyConfiguration) *CommonShardSpecApplyConfiguration {
	b.Authorization = value
	return b
}

// WithAuth sets the Auth field in the declarative configuration to the given value
// and returns the receiver, so that objects can be built by chaining "With" function invocations.
// If called multiple times, the Auth field is set to the value of the last call.
func (b *CommonShardSpecApplyConfiguration) WithAuth(value *AuthSpecApplyConfiguration) *CommonShardSpecApplyConfiguration {
	b.Auth = value
	return b
}

// WithCertificateTemplates sets the CertificateTemplates field in the declarative configuration to the given value
// and returns the receiver, so that objects can be built by chaining "With" function invocations.
// If called multiple times, the CertificateTemplates field is set to the value of the last call.
func (b *CommonShardSpecApplyConfiguration) WithCertificateTemplates(value operatorv1alpha1.CertificateTemplateMap) *CommonShardSpecApplyConfiguration {
	b.CertificateTemplates = &value
	return b
}

// WithServiceTemplate sets the ServiceTemplate field in the declarative configuration to the given value
// and returns the receiver, so that objects can be built by chaining "With" function invocations.
// If called multiple times, the ServiceTemplate field is set to the value of the last call.
func (b *CommonShardSpecApplyConfiguration) WithServiceTemplate(value *ServiceTemplateApplyConfiguration) *CommonShardSpecApplyConfiguration {
	b.ServiceTemplate = value
	return b
}

// WithDeploymentTemplate sets the DeploymentTemplate field in the declarative configuration to the given value
// and returns the receiver, so that objects can be built by chaining "With" function invocations.
// If called multiple times, the DeploymentTemplate field is set to the value of the last call.
func (b *CommonShardSpecApplyConfiguration) WithDeploymentTemplate(value *DeploymentTemplateApplyConfiguration) *CommonShardSpecApplyConfiguration {
	b.DeploymentTemplate = value
	return b
}

// WithCABundleSecretRef sets the CABundleSecretRef field in the declarative configuration to the given value
// and returns the receiver, so that objects can be built by chaining "With" function invocations.
// If called multiple times, the CABundleSecretRef field is set to the value of the last call.
func (b *CommonShardSpecApplyConfiguration) WithCABundleSecretRef(value v1.LocalObjectReference) *CommonShardSpecApplyConfiguration {
	b.CABundleSecretRef = &value
	return b
}

// WithExtraArgs adds the given value to the ExtraArgs field in the declarative configuration
// and returns the receiver, so that objects can be build by chaining "With" function invocations.
// If called multiple times, values provided by each call will be appended to the ExtraArgs field.
func (b *CommonShardSpecApplyConfiguration) WithExtraArgs(values ...string) *CommonShardSpecApplyConfiguration {
	for i := range values {
		b.ExtraArgs = append(b.ExtraArgs, values[i])
	}
	return b
}
