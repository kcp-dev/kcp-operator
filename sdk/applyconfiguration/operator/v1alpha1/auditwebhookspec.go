/*
Copyright 2024 The KCP Authors.

Licensed under the Apache License, Version 2.0 (the "License");
you may not use this file except in compliance with the License.
You may obtain a copy of the License at

    http://www.apache.org/licenses/LICENSE-2.0

Unless required by applicable law or agreed to in writing, software
distributed under the License is distributed on an "AS IS" BASIS,
WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
See the License for the specific language governing permissions and
limitations under the License.
*/

// Code generated by applyconfiguration-gen. DO NOT EDIT.

package v1alpha1

import (
	v1 "k8s.io/apimachinery/pkg/apis/meta/v1"

	operatorv1alpha1 "github.com/kcp-dev/kcp-operator/sdk/apis/operator/v1alpha1"
)

// AuditWebhookSpecApplyConfiguration represents a declarative configuration of the AuditWebhookSpec type for use
// with apply.
type AuditWebhookSpecApplyConfiguration struct {
	BatchBufferSize      *int                               `json:"batchBufferSize,omitempty"`
	BatchMaxSize         *int                               `json:"batchMaxSize,omitempty"`
	BatchMaxWait         *v1.Duration                       `json:"batchMaxWait,omitempty"`
	BatchThrottleBurst   *int                               `json:"batchThrottleBurst,omitempty"`
	BatchThrottleEnable  *bool                              `json:"batchThrottleEnable,omitempty"`
	BatchThrottleQPS     *string                            `json:"batchThrottleQPS,omitempty"`
	ConfigSecretName     *string                            `json:"configSecretName,omitempty"`
	InitialBackoff       *v1.Duration                       `json:"initialBackoff,omitempty"`
	Mode                 *operatorv1alpha1.AuditWebhookMode `json:"mode,omitempty"`
	TruncateEnabled      *bool                              `json:"truncateEnabled,omitempty"`
	TruncateMaxBatchSize *int                               `json:"truncateMaxBatchSize,omitempty"`
	TruncateMaxEventSize *int                               `json:"truncateMaxEventSize,omitempty"`
	Version              *string                            `json:"version,omitempty"`
}

// AuditWebhookSpecApplyConfiguration constructs a declarative configuration of the AuditWebhookSpec type for use with
// apply.
func AuditWebhookSpec() *AuditWebhookSpecApplyConfiguration {
	return &AuditWebhookSpecApplyConfiguration{}
}

// WithBatchBufferSize sets the BatchBufferSize field in the declarative configuration to the given value
// and returns the receiver, so that objects can be built by chaining "With" function invocations.
// If called multiple times, the BatchBufferSize field is set to the value of the last call.
func (b *AuditWebhookSpecApplyConfiguration) WithBatchBufferSize(value int) *AuditWebhookSpecApplyConfiguration {
	b.BatchBufferSize = &value
	return b
}

// WithBatchMaxSize sets the BatchMaxSize field in the declarative configuration to the given value
// and returns the receiver, so that objects can be built by chaining "With" function invocations.
// If called multiple times, the BatchMaxSize field is set to the value of the last call.
func (b *AuditWebhookSpecApplyConfiguration) WithBatchMaxSize(value int) *AuditWebhookSpecApplyConfiguration {
	b.BatchMaxSize = &value
	return b
}

// WithBatchMaxWait sets the BatchMaxWait field in the declarative configuration to the given value
// and returns the receiver, so that objects can be built by chaining "With" function invocations.
// If called multiple times, the BatchMaxWait field is set to the value of the last call.
func (b *AuditWebhookSpecApplyConfiguration) WithBatchMaxWait(value v1.Duration) *AuditWebhookSpecApplyConfiguration {
	b.BatchMaxWait = &value
	return b
}

// WithBatchThrottleBurst sets the BatchThrottleBurst field in the declarative configuration to the given value
// and returns the receiver, so that objects can be built by chaining "With" function invocations.
// If called multiple times, the BatchThrottleBurst field is set to the value of the last call.
func (b *AuditWebhookSpecApplyConfiguration) WithBatchThrottleBurst(value int) *AuditWebhookSpecApplyConfiguration {
	b.BatchThrottleBurst = &value
	return b
}

// WithBatchThrottleEnable sets the BatchThrottleEnable field in the declarative configuration to the given value
// and returns the receiver, so that objects can be built by chaining "With" function invocations.
// If called multiple times, the BatchThrottleEnable field is set to the value of the last call.
func (b *AuditWebhookSpecApplyConfiguration) WithBatchThrottleEnable(value bool) *AuditWebhookSpecApplyConfiguration {
	b.BatchThrottleEnable = &value
	return b
}

// WithBatchThrottleQPS sets the BatchThrottleQPS field in the declarative configuration to the given value
// and returns the receiver, so that objects can be built by chaining "With" function invocations.
// If called multiple times, the BatchThrottleQPS field is set to the value of the last call.
func (b *AuditWebhookSpecApplyConfiguration) WithBatchThrottleQPS(value string) *AuditWebhookSpecApplyConfiguration {
	b.BatchThrottleQPS = &value
	return b
}

// WithConfigSecretName sets the ConfigSecretName field in the declarative configuration to the given value
// and returns the receiver, so that objects can be built by chaining "With" function invocations.
// If called multiple times, the ConfigSecretName field is set to the value of the last call.
func (b *AuditWebhookSpecApplyConfiguration) WithConfigSecretName(value string) *AuditWebhookSpecApplyConfiguration {
	b.ConfigSecretName = &value
	return b
}

// WithInitialBackoff sets the InitialBackoff field in the declarative configuration to the given value
// and returns the receiver, so that objects can be built by chaining "With" function invocations.
// If called multiple times, the InitialBackoff field is set to the value of the last call.
func (b *AuditWebhookSpecApplyConfiguration) WithInitialBackoff(value v1.Duration) *AuditWebhookSpecApplyConfiguration {
	b.InitialBackoff = &value
	return b
}

// WithMode sets the Mode field in the declarative configuration to the given value
// and returns the receiver, so that objects can be built by chaining "With" function invocations.
// If called multiple times, the Mode field is set to the value of the last call.
func (b *AuditWebhookSpecApplyConfiguration) WithMode(value operatorv1alpha1.AuditWebhookMode) *AuditWebhookSpecApplyConfiguration {
	b.Mode = &value
	return b
}

// WithTruncateEnabled sets the TruncateEnabled field in the declarative configuration to the given value
// and returns the receiver, so that objects can be built by chaining "With" function invocations.
// If called multiple times, the TruncateEnabled field is set to the value of the last call.
func (b *AuditWebhookSpecApplyConfiguration) WithTruncateEnabled(value bool) *AuditWebhookSpecApplyConfiguration {
	b.TruncateEnabled = &value
	return b
}

// WithTruncateMaxBatchSize sets the TruncateMaxBatchSize field in the declarative configuration to the given value
// and returns the receiver, so that objects can be built by chaining "With" function invocations.
// If called multiple times, the TruncateMaxBatchSize field is set to the value of the last call.
func (b *AuditWebhookSpecApplyConfiguration) WithTruncateMaxBatchSize(value int) *AuditWebhookSpecApplyConfiguration {
	b.TruncateMaxBatchSize = &value
	return b
}

// WithTruncateMaxEventSize sets the TruncateMaxEventSize field in the declarative configuration to the given value
// and returns the receiver, so that objects can be built by chaining "With" function invocations.
// If called multiple times, the TruncateMaxEventSize field is set to the value of the last call.
func (b *AuditWebhookSpecApplyConfiguration) WithTruncateMaxEventSize(value int) *AuditWebhookSpecApplyConfiguration {
	b.TruncateMaxEventSize = &value
	return b
}

// WithVersion sets the Version field in the declarative configuration to the given value
// and returns the receiver, so that objects can be built by chaining "With" function invocations.
// If called multiple times, the Version field is set to the value of the last call.
func (b *AuditWebhookSpecApplyConfiguration) WithVersion(value string) *AuditWebhookSpecApplyConfiguration {
	b.Version = &value
	return b
}
