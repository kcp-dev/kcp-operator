/*
Copyright 2024 The KCP Authors.

Licensed under the Apache License, Version 2.0 (the "License");
you may not use this file except in compliance with the License.
You may obtain a copy of the License at

    http://www.apache.org/licenses/LICENSE-2.0

Unless required by applicable law or agreed to in writing, software
distributed under the License is distributed on an "AS IS" BASIS,
WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
See the License for the specific language governing permissions and
limitations under the License.
*/

// Code generated by applyconfiguration-gen. DO NOT EDIT.

package v1alpha1

import (
	v1 "k8s.io/api/core/v1"

	operatorv1alpha1 "github.com/kcp-dev/kcp-operator/sdk/apis/operator/v1alpha1"
)

// RootShardProxySpecApplyConfiguration represents a declarative configuration of the RootShardProxySpec type for use
// with apply.
type RootShardProxySpecApplyConfiguration struct {
	Image                *ImageSpecApplyConfiguration             `json:"image,omitempty"`
	Replicas             *int32                                   `json:"replicas,omitempty"`
	Resources            *v1.ResourceRequirements                 `json:"resources,omitempty"`
	ServiceTemplate      *ServiceTemplateApplyConfiguration       `json:"serviceTemplate,omitempty"`
	DeploymentTemplate   *DeploymentTemplateApplyConfiguration    `json:"deploymentTemplate,omitempty"`
	CertificateTemplates *operatorv1alpha1.CertificateTemplateMap `json:"certificateTemplates,omitempty"`
}

// RootShardProxySpecApplyConfiguration constructs a declarative configuration of the RootShardProxySpec type for use with
// apply.
func RootShardProxySpec() *RootShardProxySpecApplyConfiguration {
	return &RootShardProxySpecApplyConfiguration{}
}

// WithImage sets the Image field in the declarative configuration to the given value
// and returns the receiver, so that objects can be built by chaining "With" function invocations.
// If called multiple times, the Image field is set to the value of the last call.
func (b *RootShardProxySpecApplyConfiguration) WithImage(value *ImageSpecApplyConfiguration) *RootShardProxySpecApplyConfiguration {
	b.Image = value
	return b
}

// WithReplicas sets the Replicas field in the declarative configuration to the given value
// and returns the receiver, so that objects can be built by chaining "With" function invocations.
// If called multiple times, the Replicas field is set to the value of the last call.
func (b *RootShardProxySpecApplyConfiguration) WithReplicas(value int32) *RootShardProxySpecApplyConfiguration {
	b.Replicas = &value
	return b
}

// WithResources sets the Resources field in the declarative configuration to the given value
// and returns the receiver, so that objects can be built by chaining "With" function invocations.
// If called multiple times, the Resources field is set to the value of the last call.
func (b *RootShardProxySpecApplyConfiguration) WithResources(value v1.ResourceRequirements) *RootShardProxySpecApplyConfiguration {
	b.Resources = &value
	return b
}

// WithServiceTemplate sets the ServiceTemplate field in the declarative configuration to the given value
// and returns the receiver, so that objects can be built by chaining "With" function invocations.
// If called multiple times, the ServiceTemplate field is set to the value of the last call.
func (b *RootShardProxySpecApplyConfiguration) WithServiceTemplate(value *ServiceTemplateApplyConfiguration) *RootShardProxySpecApplyConfiguration {
	b.ServiceTemplate = value
	return b
}

// WithDeploymentTemplate sets the DeploymentTemplate field in the declarative configuration to the given value
// and returns the receiver, so that objects can be built by chaining "With" function invocations.
// If called multiple times, the DeploymentTemplate field is set to the value of the last call.
func (b *RootShardProxySpecApplyConfiguration) WithDeploymentTemplate(value *DeploymentTemplateApplyConfiguration) *RootShardProxySpecApplyConfiguration {
	b.DeploymentTemplate = value
	return b
}

// WithCertificateTemplates sets the CertificateTemplates field in the declarative configuration to the given value
// and returns the receiver, so that objects can be built by chaining "With" function invocations.
// If called multiple times, the CertificateTemplates field is set to the value of the last call.
func (b *RootShardProxySpecApplyConfiguration) WithCertificateTemplates(value operatorv1alpha1.CertificateTemplateMap) *RootShardProxySpecApplyConfiguration {
	b.CertificateTemplates = &value
	return b
}
