/*
Copyright 2024 The KCP Authors.

Licensed under the Apache License, Version 2.0 (the "License");
you may not use this file except in compliance with the License.
You may obtain a copy of the License at

    http://www.apache.org/licenses/LICENSE-2.0

Unless required by applicable law or agreed to in writing, software
distributed under the License is distributed on an "AS IS" BASIS,
WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
See the License for the specific language governing permissions and
limitations under the License.
*/

// Code generated by applyconfiguration-gen. DO NOT EDIT.

package v1alpha1

import (
	v1 "k8s.io/apimachinery/pkg/apis/meta/v1"
)

// AuthorizationWebhookSpecApplyConfiguration represents a declarative configuration of the AuthorizationWebhookSpec type for use
// with apply.
type AuthorizationWebhookSpecApplyConfiguration struct {
	AllowPaths           []string     `json:"allowPaths,omitempty"`
	CacheAuthorizedTTL   *v1.Duration `json:"cacheAuthorizedTTL,omitempty"`
	CacheUnauthorizedTTL *v1.Duration `json:"cacheUnauthorizedTTL,omitempty"`
	ConfigSecretName     *string      `json:"configSecretName,omitempty"`
	Version              *string      `json:"version,omitempty"`
}

// AuthorizationWebhookSpecApplyConfiguration constructs a declarative configuration of the AuthorizationWebhookSpec type for use with
// apply.
func AuthorizationWebhookSpec() *AuthorizationWebhookSpecApplyConfiguration {
	return &AuthorizationWebhookSpecApplyConfiguration{}
}

// WithAllowPaths adds the given value to the AllowPaths field in the declarative configuration
// and returns the receiver, so that objects can be build by chaining "With" function invocations.
// If called multiple times, values provided by each call will be appended to the AllowPaths field.
func (b *AuthorizationWebhookSpecApplyConfiguration) WithAllowPaths(values ...string) *AuthorizationWebhookSpecApplyConfiguration {
	for i := range values {
		b.AllowPaths = append(b.AllowPaths, values[i])
	}
	return b
}

// WithCacheAuthorizedTTL sets the CacheAuthorizedTTL field in the declarative configuration to the given value
// and returns the receiver, so that objects can be built by chaining "With" function invocations.
// If called multiple times, the CacheAuthorizedTTL field is set to the value of the last call.
func (b *AuthorizationWebhookSpecApplyConfiguration) WithCacheAuthorizedTTL(value v1.Duration) *AuthorizationWebhookSpecApplyConfiguration {
	b.CacheAuthorizedTTL = &value
	return b
}

// WithCacheUnauthorizedTTL sets the CacheUnauthorizedTTL field in the declarative configuration to the given value
// and returns the receiver, so that objects can be built by chaining "With" function invocations.
// If called multiple times, the CacheUnauthorizedTTL field is set to the value of the last call.
func (b *AuthorizationWebhookSpecApplyConfiguration) WithCacheUnauthorizedTTL(value v1.Duration) *AuthorizationWebhookSpecApplyConfiguration {
	b.CacheUnauthorizedTTL = &value
	return b
}

// WithConfigSecretName sets the ConfigSecretName field in the declarative configuration to the given value
// and returns the receiver, so that objects can be built by chaining "With" function invocations.
// If called multiple times, the ConfigSecretName field is set to the value of the last call.
func (b *AuthorizationWebhookSpecApplyConfiguration) WithConfigSecretName(value string) *AuthorizationWebhookSpecApplyConfiguration {
	b.ConfigSecretName = &value
	return b
}

// WithVersion sets the Version field in the declarative configuration to the given value
// and returns the receiver, so that objects can be built by chaining "With" function invocations.
// If called multiple times, the Version field is set to the value of the last call.
func (b *AuthorizationWebhookSpecApplyConfiguration) WithVersion(value string) *AuthorizationWebhookSpecApplyConfiguration {
	b.Version = &value
	return b
}
